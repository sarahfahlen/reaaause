@page "/mypurchases"
@using reaause.Services.Advertisment
@using shared
@using reaause.Component
@inject NavigationManager navManager
@inject IPurchaseService pService
@inject ILoginService lService
@inject IAdvertisementService aService

<h3>My Purchases</h3>
@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success">
        @successMessage
    </div>
}
@if (myPurchases.Any())
{
    <div class="item-grid">
        @foreach (var item in myPurchases)
        {
            var ad = item.Advertisement;
            var purchase = item.Purchase;

            <div class="item-card">
                <div class="image-container">
                    @if (!string.IsNullOrWhiteSpace(ad.Picture))
                    {
                        <img src="@ad.Picture" alt="AdPicture" class="item-image" />
                    }
                    <div class="badge @GetStatusBadgeClass(purchase.Status)">
                        @purchase.Status
                    </div>
                </div>

                <div class="item-info">
                    <h3 class="ad-title">@ad.Name</h3>
                    <div class="ad-details">
                        <div><span>Category:</span> @ad.Category</div>
                        <div><span>Color:</span> @ad.Color</div>
                        <div><span>Price:</span> @ad.Price DKK</div>
                        <div><span>Condition:</span> @ad.Condition</div>
                        <div><span>At School:</span> @(ad.AtSchool ? "Yes" : "No")</div>

                        @if (ad.AtSchool)
                        {
                            <div><span>Location:</span> @ad.Location?.Name: @ad.Location?.RoomNumber</div>
                        }

                        <div><span>Seller:</span> @ad.Seller?.Name</div>
                    </div>

                    <p class="ad-description">@ad.Description</p>
                    <p><strong>My Bid:</strong> @purchase.Bid DKK</p>

                    @if (purchase.Status == "pending")
                    {
                        <button class="decline-button" @onclick="() => AskCancelBid(ad, purchase)">
                            Cancel bid
                        </button>
                    }
                </div>
            </div>
        }
    </div>
}
else
{
    <p>You have no active or pending purchases.</p>
}
<ModalDialog @ref="deleteConfirmDialog" Title="Confirm Cancellation">
    <div class="modal-content">
        <p>Are you sure you want to cancel your bid?</p>
        <div class="form-footer">
            <button class="cancel-button" @onclick="CancelDelete">Cancel</button>
            <button class="delete-button" @onclick="ConfirmDelete">Yes, cancel bid</button>
        </div>
    </div>
</ModalDialog>

@code {
    private List<PurchaseWithAd> myPurchases = new();
    private User? loggedIn;
    private string successMessage = "";
    private ModalDialog? deleteConfirmDialog;
    private Advertisement? adToCancel;
    private Purchase? purchaseToCancel;

    protected override async Task OnInitializedAsync()
    {
        loggedIn = await lService.GetUserLoggedIn();
        if (loggedIn == null)
        {
            navManager.NavigateTo("login/mypurchases");
            return;
        }
        myPurchases = await pService.GetMyPurchase(loggedIn.Email);
    }
    
    private void AskCancelBid(Advertisement ad, Purchase purchase)
    {
        adToCancel = ad;
        purchaseToCancel = purchase;
        deleteConfirmDialog?.Open();
    }
    
    private void CancelDelete()
    {
        adToCancel = null;
        purchaseToCancel = null;
        deleteConfirmDialog?.Close();
    }


    private async Task ConfirmDelete()
    {
        if (adToCancel != null && purchaseToCancel != null)
        {
            await pService.UpdatePurchaseRequestStatus(adToCancel.Id, purchaseToCancel.PurchaseId, "declined");

            if (adToCancel.PurchaseRequests != null &&
                !adToCancel.PurchaseRequests.Any(r => r.Status == "pending" && r.PurchaseId != purchaseToCancel.PurchaseId))
            {
                await aService.UpdateAdStatus(adToCancel.Id, "active");
            }

            successMessage = "Your bid has been canceled.";
            adToCancel = null;
            purchaseToCancel = null;
        }

        deleteConfirmDialog?.Close();
        myPurchases = await pService.GetMyPurchase(loggedIn.Email);
        StateHasChanged();
        await Task.Delay(4000);
        successMessage = "";
        StateHasChanged();
    }
    

    private string GetStatusBadgeClass(string status)
    {
        return status.ToLower() switch
        {
            "pending" => "badge-pending",
            "accepted" => "badge-accepted",
            "declined" => "badge-declined",
            _ => "badge-default"
        };
    }
}
