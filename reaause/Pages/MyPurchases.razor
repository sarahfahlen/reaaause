@using reaause.Services.Advertisment
@using shared
@inject NavigationManager navManager
@inject IPurchaseService pService
@inject ILoginService lService
@page "/mypurchases"

<h3>My Purchases</h3>

@if (myPurchases.Any())
{
    <div class="item-grid">
        @foreach (var item in myPurchases)
        {
            var ad = item.Advertisement;
            var purchase = item.Purchase;

            <div class="item-card">
                <div class="image-container">
                    @if (!string.IsNullOrWhiteSpace(ad.Picture))
                    {
                        <img src="@ad.Picture" alt="AdPicture" class="item-image" />
                    }
                    <div class="badge @GetStatusBadgeClass(purchase.Status)">
                        @purchase.Status
                    </div>
                </div>

                <div class="item-info">
                    <h3 class="ad-title">@ad.Name</h3>
                    <div class="ad-details">
                        <div><span>Category:</span> @ad.Category</div>
                        <div><span>Color:</span> @ad.Color</div>
                        <div><span>Price:</span> @ad.Price DKK</div>
                        <div><span>Condition:</span> @ad.Condition</div>
                        <div><span>At School:</span> @(ad.AtSchool ? "Yes" : "No")</div>
                        <div><span>Location:</span> @ad.Location?.Name</div>
                    </div>

                    <p class="ad-description">@ad.Description</p>
                    <p><strong>My Bid:</strong> @purchase.Bid DKK</p>
                    <p><strong>Purchase Status:</strong> @purchase.Status</p>
                </div>
            </div>
        }
    </div>
}
else
{
    <p>You have no active or pending purchases.</p>
}

@code {
    private List<PurchaseWithAd> myPurchases = new();

    private User? loggedIn;

    protected override async Task OnInitializedAsync()
    {
        loggedIn = await lService.GetUserLoggedIn();
        if (loggedIn == null)
        {
            navManager.NavigateTo("login/mypurchases");
            return;
        }

        myPurchases = await pService.GetMyPurchase(loggedIn.Email);

    }

    private string GetStatusBadgeClass(string status)
    {
        return status.ToLower() switch
        {
            "pending" => "badge-pending",
            "accepted" => "badge-accepted",
            "declined" => "badge-declined",
            _ => "badge-default"
        };
    }
}
