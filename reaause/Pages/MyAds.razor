@page "/myads"
@using reaause.Services.Advertisment
@using reaause.Services.Facilities
@using shared
@using reaause.Component
@inject NavigationManager navManager
@inject IAdvertisementService aService
@inject ILoginService lService
@inject IPurchaseService pService
@inject IFacilityService FacilityService

<h3>My Advertisements</h3>

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success">
        @successMessage
    </div>
}

<!-- Button to add a new advertisement -->
<div class="add-button-container">
    <button class="add-button" @onclick="OpenAddModal">Add New Advertisement</button>
</div>

<!-- Modal Dialog for Adding/Editing Ads -->
<ModalDialog @ref="addToDialog" Title=@(isEditMode ? "Edit Advertisement" : "Add New Advertisement")>
    <EditForm Model="@aItem" OnValidSubmit="@HandleSubmit" class="modal-form">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="modal-grid">
            <div class="form-group">
                <label>Name</label>
                <InputText @bind-Value="aItem.Name" class="form-control" />
            </div>

            <div class="form-group">
                <label>Category</label>
                <InputSelect @bind-Value="aItem.Category" class="form-control">
                    <option value="">-- Select category --</option>
                    @foreach (var option in catOptions)
                    {
                        <option value="@option">@option</option>
                    }
                </InputSelect>
            </div>

            <div class="form-group">
                <label>Color</label>
                <InputText @bind-Value="aItem.Color" class="form-control" />
            </div>

            <div class="form-group">
                <label>Condition</label>
                <InputSelect @bind-Value="aItem.Condition" class="form-control">
                    <option value="">-- Select the condition --</option>
                    @foreach (var option in condOptions)
                    {
                        <option value="@option">@option</option>
                    }
                </InputSelect>
            </div>

            <div class="form-group">
                <label>Price (DKK)</label>
                <InputNumber @bind-Value="aItem.Price" class="form-control" />
            </div>

            <div class="form-group">
                <label>At school?</label>
                <label class="custom-switch">
                    <input type="checkbox" @onchange="ToggleAtSchool" checked="@aItem.AtSchool" />
                    <span class="slider"></span>
                </label>
            </div>


            @if (aItem.AtSchool)
            {
                <div class="form-group">
                    <label for="schoolLocation">School Location:</label>
                    <InputSelect id="schoolLocation"
                                 class="form-control"
                                 @bind-Value="selectedFacilityName" @onchange="OnFacilitySelectedByName">
                        <option value="">-- Select a facility --</option>
                        @foreach (var facility in facilities)
                        {
                            <option value="@facility.Name">@facility.Name (@facility.RoomNumber)</option>
                        }
                    </InputSelect>

                </div>
            }


            <div class="form-group full-width">
                <label>Description</label>
                <InputTextArea @bind-Value="aItem.Description" class="form-control" />
            </div>

            <div class="form-group full-width">
                <label>Picture URL</label>
                <InputText @bind-Value="aItem.Picture" class="form-control" />
            </div>
        </div>

        <div class="form-footer">
            <button type="submit" class="submit-button">
                @(isEditMode ? "Save Changes" : "Add Advertisement")
            </button>
        </div>
    </EditForm>
</ModalDialog>

<!-- Cards for each ad -->
<div class="item-grid">
    @foreach (var ad in myAds)
    {
        <div class="item-card">
            <div class="image-container">
                @if (!string.IsNullOrWhiteSpace(ad.Picture))
                {
                    <img src="@ad.Picture" alt="AdPicture" class="item-image" />
                }
                <div class="badge @GetStatusBadgeClass(ad.Status)">
                    @ad.Status
                </div>
            </div>

            <div class="item-info">
                <h3 class="ad-title">@ad.Name</h3>
                <div class="ad-details">
                    <div><span>Category:</span> @ad.Category</div>
                    <div><span>Color:</span> @ad.Color</div>
                    <div><span>Price:</span> @ad.Price DKK</div>
                    <div><span>Condition:</span> @ad.Condition</div>
                    <div><span>At School:</span> @(ad.AtSchool ? "Yes" : "No")</div>

                    @if (ad.AtSchool)
                    {
                        <div><span>Location:</span> @ad.Location?.Name: @ad.Location?.RoomNumber</div>
                    }
 
                </div>
                <p class="ad-description">@ad.Description</p>
                <div class="ad-actions">
                    <button class="edit-button" @onclick="() => Update(ad)" title="Edit">&#9998;</button>
                    <button class="delete-button" @onclick="() => Delete(ad)" title="Delete">&#10006;</button>
                </div>

                @if ((ad.Status == "active" || ad.Status == "reserved") && ad.PurchaseRequests != null && ad.PurchaseRequests.Any(p => p.Status == "pending"))
                {
                    <div class="purchase-requests">
                        <h3>Purchase Requests</h3>
                        <ul>
                            @foreach (var request in ad.PurchaseRequests.Where(p => p.Status == "pending"))
                            {
                                <li>
                                    <strong>@request.Buyer.Name</strong> wants to buy for @request.Bid DKK
                                    <div class="request-buttons">
                                        <button class="accept-button" @onclick="() => AcceptPurchase(ad, request)">Accept</button>
                                        <button class="decline-button" @onclick="() => DeclinePurchase(ad, request)">Decline</button>
                                    </div>
                                </li>
                            }
                        </ul>
                    </div>
                }
            </div>
        </div>
    }
</div>
<ModalDialog @ref="deleteConfirmDialog" Title="Confirm Deletion">
    <div class="modal-content">
        <p>Are you sure you want to delete this advertisement?</p>
        <div class="form-footer">
            <button class="cancel-button" @onclick="CancelDelete">Cancel</button>
            <button class="delete-button" @onclick="ConfirmDelete">Yes, Delete</button>
        </div>
    </div>
</ModalDialog>

@code {
    private List<Advertisement> myAds = new();
    private List<Facility> facilities = new();
    private User? loggedIn;
    private string[] catOptions = { "Furniture", "Mens clothing", "Womens clothing", "Shoes", "Electronics" };
    private string[] condOptions = { "New with tag", "As new", "Great", "Used", "Worn out" };
    private ModalDialog? addToDialog;
    private bool isEditMode = false;
    private Advertisement aItem = new();
    private string successMessage = "";
    private string selectedFacilityId = "";
    private string selectedFacilityName = "";
    private ModalDialog? deleteConfirmDialog;
    private Advertisement? adToDelete;
    
    
    protected override async Task OnInitializedAsync()
    {
        loggedIn = await lService.GetUserLoggedIn();
        if (loggedIn == null)
        {
            navManager.NavigateTo("login/myads");
            return;
        }
        facilities = await FacilityService.GetAllFacilities();
        await GetMyAds();
    }

    private async Task GetMyAds()
    {
        myAds = await aService.GetMyAds(loggedIn.Email);
    }
    
    private void OpenAddModal()
    {
        isEditMode = false;
        aItem = new Advertisement
        {
            Status = "Active",
            Seller = new Seller
            {
                UserId = loggedIn.Id,
                Name = loggedIn.Name,
                Email = loggedIn.Email
            }
        };
        selectedFacilityId = "";
        addToDialog?.Open();
    }

    private async Task HandleSubmit()
    {
        if (aItem.AtSchool && !string.IsNullOrEmpty(selectedFacilityName))
        {
            var selectedFacility = facilities.FirstOrDefault(f => f.Name == selectedFacilityName);
            if (selectedFacility != null)
            {
                aItem.Location = new Facility
                {
                    Id = selectedFacility.Id,
                    Name = selectedFacility.Name,
                    RoomNumber = selectedFacility.RoomNumber,
                    OpeningHours = selectedFacility.OpeningHours,
                    StaffUserId = selectedFacility.StaffUserId
                };
            }
        }

        if (isEditMode)
        {
            await aService.UpdateAd(aItem);
        }
        else
        {
            await aService.AddAd(aItem);
        }

        addToDialog?.Close();
        await GetMyAds();
        successMessage = "Advertisement saved!";
        StateHasChanged();
        await Task.Delay(4000); // Vent 4 sekunder
        successMessage = "";
        StateHasChanged();
    }



    private async Task Update(Advertisement ad)
    {
        isEditMode = true;

        // LAV EN KOPI i stedet for reference
        aItem = new Advertisement
        {
            Id = ad.Id,
            Name = ad.Name,
            Category = ad.Category,
            Color = ad.Color,
            Condition = ad.Condition,
            Price = ad.Price,
            AtSchool = ad.AtSchool,
            Description = ad.Description,
            Picture = ad.Picture,
            Status = ad.Status,
            Seller = ad.Seller,
            Location = ad.Location != null ? new Facility
            {
                Id = ad.Location.Id,
                Name = ad.Location.Name,
                RoomNumber = ad.Location.RoomNumber,
                OpeningHours = ad.Location.OpeningHours,
                StaffUserId = ad.Location.StaffUserId
            } : null,
            PurchaseRequests = ad.PurchaseRequests?.Select(p => new Purchase
            {
                PurchaseId = p.PurchaseId,
                Bid = p.Bid,
                Buyer = p.Buyer,
                Status = p.Status
            }).ToList()
        };

        if (ad.Location != null)
        {
            selectedFacilityName = ad.Location.Name;
        }
        else
        {
            selectedFacilityName = "";
        }

        addToDialog.Open();
    }

    private void Delete(Advertisement ad)
    {
        adToDelete = ad;
        deleteConfirmDialog?.Open();
    }

    private void CancelDelete()
    {
        adToDelete = null;
        deleteConfirmDialog?.Close();
    }

    private async Task ConfirmDelete()
    {
        if (adToDelete != null)
        {
            await aService.DeleteById(adToDelete.Id);
            await GetMyAds();
            adToDelete = null;
        }
        deleteConfirmDialog?.Close();
    }

    private void ToggleAtSchool(ChangeEventArgs e)
    {
        aItem.AtSchool = (bool)e.Value;

        if (aItem.AtSchool && aItem.Location == null)
        {
            aItem.Location = new Facility();
        }
        else if (!aItem.AtSchool)
        {
            aItem.Location = null;
            selectedFacilityId = "";
        }
    }

    private void OnFacilitySelectedByName(ChangeEventArgs e)
    {
        selectedFacilityName = e.Value?.ToString() ?? "";

        var selectedFacility = facilities.FirstOrDefault(f => f.Name == selectedFacilityName);
        if (selectedFacility != null)
        {
            aItem.Location = new Facility
            {
                Id = selectedFacility.Id,
                Name = selectedFacility.Name,
                RoomNumber = selectedFacility.RoomNumber,
                OpeningHours = selectedFacility.OpeningHours,
                StaffUserId = selectedFacility.StaffUserId
            };
        }
    }

    private async Task AcceptPurchase(Advertisement ad, Purchase request)
    {
        if (request == null || ad == null)
            return;

        await pService.UpdatePurchaseRequestStatus(ad.Id, request.PurchaseId, "accepted");
        await aService.UpdateAdStatus(ad.Id, "sold");
        await GetMyAds();
        StateHasChanged();
    }

    private async Task DeclinePurchase(Advertisement ad, Purchase request)
    {
        await pService.UpdatePurchaseRequestStatus(ad.Id, request.PurchaseId, "declined");

        var adInList = myAds.FirstOrDefault(x => x.Id == ad.Id);
        if (adInList != null)
        {
            var req = adInList.PurchaseRequests.FirstOrDefault(r => r.PurchaseId == request.PurchaseId);
            if (req != null)
            {
                req.Status = "declined";
            }

            if (!adInList.PurchaseRequests.Any(r => r.Status == "pending"))
            {
                await aService.UpdateAdStatus(ad.Id, "active");
                adInList.Status = "active";
            }
        }
        StateHasChanged();
    }

    private string GetStatusBadgeClass(string status)
    {
        return status.ToLower() switch
        {
            "active" => "badge-active",
            "reserved" => "badge-reserved",
            "sold" => "badge-sold",
            "inactive" => "badge-inactive",
            _ => "badge-default"
        };
    }
}
