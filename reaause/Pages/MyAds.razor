@using reaause.Services.Advertisment
@using shared;
@inject NavigationManager navManager
@inject IAdvertisementService aService
@inject ILoginService lService
@inject IPurchaseService pService
@page "/myads"
@using reaause.Component

<h3>My Advertisements</h3>

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success">
        @successMessage
    </div>
}


<!-- Button to add a new advertisement -->
<div class="add-button-container">
    <button class="add-button" @onclick="OpenAddModal">Add New Advertisement</button>
</div>

<!-- Modal Dialog for Adding/Editing Ads -->
<ModalDialog @ref="addToDialog" Title="Add a New Advertisement">
    <EditForm Model="@aItem" OnValidSubmit="@HandleSubmit" class="modal-form">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="modal-grid">
            <div class="form-group">
                <label>Name</label>
                <InputText @bind-Value="aItem.Name" class="form-control" />
            </div>

            <div class="form-group">
                <label>Category</label>
                <InputSelect id="category" @bind-Value="aItem.Category" class="form-control">
                    @foreach (var option in catOptions)
                    {
                        <option value="@option">@option</option>
                    }
                </InputSelect>
            </div>

            <div class="form-group">
                <label>Color</label>
                <InputText @bind-Value="aItem.Color" class="form-control" />
            </div>

            <div class="form-group">
                <label>Condition</label>
                <InputSelect id="condition" @bind-Value="aItem.Condition" class="form-control">
                    @foreach (var option in condOptions)
                    {
                        <option value="@option">@option</option>
                    }
                </InputSelect>
            </div>

            <div class="form-group">
                <label>Price (DKK)</label>
                <InputNumber @bind-Value="aItem.Price" class="form-control" />
            </div>

            <div class="form-group checkbox-group">
                <label class="custom-checkbox">
                    <input type="checkbox" @onchange="ToggleAtSchool" checked="@aItem.AtSchool" />
                    At school?
                </label>
            </div>

            @if (aItem.AtSchool)
            {
                <div class="form-group">
                    <label for="schoolLocation">School Location:</label>
                    <input type="text" id="schoolLocation" class="form-control" @bind="aItem.Location.Name" />
                </div>
            }

            <div class="form-group full-width">
                <label>Description</label>
                <InputTextArea @bind-Value="aItem.Description" class="form-control" />
            </div>

            <div class="form-group full-width">
                <label>Picture URL</label>
                <InputText @bind-Value="aItem.Picture" class="form-control" />
            </div>
        </div>

        <div class="form-footer">
            <button type="submit" class="submit-button"> Add Advertisement </button>
        </div>
    </EditForm>

</ModalDialog>

<!-- Cards for each ad -->
<div class="item-grid">
    @foreach (var ad in myAds.Where(ad => ad.Status != "sold"))
    {
        <div class="item-card">
            <div class="image-container">
                @if (!string.IsNullOrWhiteSpace(ad.Picture))
                {
                    <img src="@ad.Picture" alt="AdPicture" class="item-image" />
                }
                <div class="badge @GetStatusBadgeClass(ad.Status)">
                    @ad.Status
                </div>
            </div>

            <div class="item-info">
                <h3 class="ad-title">@ad.Name</h3>
                <div class="ad-details">
                    <div><span>Category:</span> @ad.Category</div>
                    <div><span>Color:</span> @ad.Color</div>
                    <div><span>Price:</span> @ad.Price DKK</div>
                    <div><span>Condition:</span> @ad.Condition</div>
                    <div><span>At School:</span> @(ad.AtSchool ? "Yes" : "No")</div>
                    <div><span>Location:</span> @ad.Location?.Name</div>
                </div>
                <p class="ad-description">@ad.Description</p>
                <div class="ad-actions">
                    <button class="edit-button" title="Edit">&#9998;</button> <!-- blyant -->
                    <button class="delete-button" title="Delete">&#10006;</button> <!-- kryds -->

                </div>

                @if (ad.PurchaseRequests != null && ad.PurchaseRequests.Any(p => p.Status == "pending"))
                {
                    <div class="purchase-requests">
                        <h3>Purchase Requests</h3>
                        <ul>
                            @foreach (var request in ad.PurchaseRequests.Where(p => p.Status == "pending"))
                            {
                                <li>
                                    <strong>@request.Buyer.Name</strong> wants to buy for @request.Bid DKK
                                    <div class="request-buttons">
                                        <button class="accept-button" @onclick="() => AcceptPurchase(ad, request)">Accept</button>
                                        <button class="decline-button" @onclick="() => DeclinePurchase(ad, request)">Decline</button>
                                    </div>
                                </li>
                            }
                        </ul>
                    </div>
                }

            </div>
        </div>
    }
</div>

@code {
    private List<Advertisement> myAds = new();
    private User? loggedIn;
    private string[] catOptions = { "Furniture", "Mens clothing", "Womens clothing", "Shoes", "Electronics" };
    private string[] condOptions = { "New with tag", "As new", "Great", "Used", "Worn out" };
    private ModalDialog? addToDialog;
    private Advertisement aItem = new();
    private string successMessage = "";


    protected override async Task OnInitializedAsync()
    {
        loggedIn = await lService.GetUserLoggedIn();
        if (loggedIn == null)
        {
            navManager.NavigateTo("login/myads");
            return;
        }
        await GetMyAds();
    }

    private async Task GetMyAds()
    {
        myAds = await aService.GetMyAds(loggedIn.Email);
    }



    private void OpenAddModal()
    {
        aItem = new Advertisement
        {
            Status = "Active",
            Seller = new Seller
            {
                UserId = loggedIn.Id,
                Name = loggedIn.Name,
                Email = loggedIn.Email
            }
        };
        addToDialog?.Open();
    }

    private async Task HandleSubmit()
    {
        await aService.AddAd(aItem);
        addToDialog?.Close();
        await GetMyAds();
        
        successMessage = "Annonce tilfÃ¸jet!";
        StateHasChanged(); 
    } 
    
    private void ToggleAtSchool(ChangeEventArgs e)
    {
        aItem.AtSchool = (bool)e.Value;

        if (aItem.AtSchool && aItem.Location == null)
        {
            aItem.Location = new Facility();
        }
    }
    
    private async Task AcceptPurchase(Advertisement ad, Purchase request)
    {
        if (request == null || ad == null)
            return;
        
        await pService.UpdatePurchaseStatus(request.PurchaseId, "accepted");
        await aService.UpdateAdStatus(ad.Id, "sold");
        await GetMyAds();
    }

    private async Task DeclinePurchase(Advertisement ad, Purchase request)
    {
        if (request == null || ad == null)
            return;
        await pService.UpdatePurchaseStatus(request.PurchaseId, "declined");
        await aService.UpdateAdStatus(ad.Id, "active");
        await GetMyAds();
    }




    private string GetStatusBadgeClass(string status)
    {
        return status.ToLower() switch
        {
            "active" => "badge-active",
            "reserved" => "badge-reserved",
            "sold" => "badge-sold",
            "inactive" => "badge-inactive",
            _ => "badge-default"
        };
    }

}